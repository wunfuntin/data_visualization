#!/bin/bash

# Use tee to capture the printout of an 'echo' command.
# echo "This message is from the script" | tee -a output.log


WORKING_DIRECTORY="/Users/rwalker/Documents/TT_lab/python/dash_prot_char_v1_1/silent_tools"


cd "$WORKING_DIRECTORY"


if [ $? -ne 0 ]; then
    echo "Failed to change directory to $WORKING_DIR"
    exit 1
fi



# echo "current working directory is $(pwd)" | tee -a output.log



tags=""


# echo "current working directory is still $(pwd)" | tee -a output.log



#https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   
    echo -n "$var"
}


# echo "current working directory is still still $(pwd)" | tee -a output.log



###---Commented out the 'if' statement below specifically to work in the Dash Application---###

#https://stackoverflow.com/questions/19408649/pipe-input-into-a-script
# if [ -p /dev/stdin ]; then
#    echo "current working directory is still still $(pwd) and we are inside the if statement" | tee -a output.log
#    while IFS= read tag; do
#        tags="$tags $(trim $tag)"
#    done
#
# fi



# echo "current working directory is still still still $(pwd)" | tee -a output.log




if [ $# -eq 0 ]; then
    echo >&2 ""
    echo >&2 "silentextractspecific by bcov - a tool to easily extract specific tags from silent files" | tee -a output.log
    echo >&2 "Usage:"
    echo >&2 "        cat list_of_tags.list | silentextractspecific myfile.silent"
    echo >&2 "                             or"
    echo >&2 "        silentextractspecific myfile.silent tag1 tag2 tag3"
    echo >&2 "Flags:"
    echo >&2 "        -j cpus"
    echo >&2 "        -p param_file"
    echo >&2 "        @flags_file"
    exit 1
fi


source $(dirname $(type -p "$0"))/_helpers/extract_flags.sh

# echo "directory is $(pwd)" | tee -a output.log

silent=$1
shift
for tag in "$@"; do
    tags="$tags $(trim $tag)"
done


if [ -z "$tags" ]; then
    exit 0;
fi


tmp_file=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13)
tmp_file="tmp_${tmp_file}.silent"


# Script execution directory path
# directory=/Users/rwalker/Documents/TT_lab/python/dash_prot_char_v1_1/silent_tools


echo "$tags" | silentslice $silent > $tmp_file


silentextract $tmp_file


rm $tmp_file


